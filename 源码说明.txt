实现：
1. 手动实现蒙特卡洛树搜索算法，选择两种不同策略，
一是模拟训练到终止，二是模拟训练到指定层数，
以评估函数作为reward反馈，尝试多次迭代模拟，优化AI性能。


2.手动实现遗传算法，设置不同的种群大小、迭代次数进行多次训练，
得出最优化的评估函数权重参数。


3. 优化评估函数，选择不同的评估策略进行比较，加入多种考虑因素：
棋子差、行动力、棋盘权重、棋盘边界位置动态调整权重、稳定子。


4. 尝试用tensorflow训练蒙特卡洛树，将其与之前的优化版本进行比对，
观察是否有进一步优化。


5. 尝试使用多线程对minimax搜索进行优化，缩短搜索时间。
（实际效果不好，与python多线程版本有关）


6. 根据搜索深度复杂度，动态选择MCTS搜索的层数，中间搜索层数
适当减少，后面增加模拟迭代次数。



代码文件：


gameboard.py  棋盘以及对应操作
gamePlayer.py  人下子的对象、AI下子对象、minimax函数、各种评估函数
genetic_algorithm.py 遗传算法
main.py 主函数，运行该函数进行游戏
mcts  蒙特卡洛树搜索策略
player2.py AI与AI训练使用
train_main.py 遗传算法训练使用

